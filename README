Проект состоит из библиотеки для решения задачи о коммивояжере, программы для командной строки для ручного тестирования,
утилиты измеряющей производительность и скрипта, визуализирующего.

В папке сборки:
Для запуска тестов
    make test
Для запуска теста производительности
    ./src/performance/PERF_MESUARE <относительный путь до папки performance test data/tests>
Для запуска консольной программы
    ./src/command_line_app/SALESMAN_APP

Задача о коммивояжере
В заданном взвешенном полном графе найти минимальный по весу
путь по всем вершинам.

Используется 2 метода реализации решения данной задачи.

Все вершины нумеруются и ассоциируются с числами от 1 до n.

1. Метод полного перебора

Для n вершин генерируются всевозможные последовательности длины n 
с числами от 1 до n, где каждое число используется ровно один раз.
Для каждой такой последовательности проверяется существование ребра между
каждыми соседними вершинами. Если между какими-то вершинами ребра нет,
то такого пути в графе нет, если путь в графе существует, то находим длину
минимального пути. При этом full_search выводит минимальный путь с возвращением,
если он есть; если пути, проходящего по всем вершинам и возвращающегося в начальную,
нет, то выводится длина минимального пути по всем вершинам.

Различных последовательностей длины n - n!
Алгоритм обрабатывает каждую последовательность за n,
в остальных блоках кода линейная сложность
Сложность алгоритма О(n! * n)
Минусом алгоритма является его сложность, уже на небольших n ответ вычисляется очень долго.
Но алгоритм выдает правильный ответ для любого графа, что очевидно из того, что мы ищем
минимальный путь из всевозможных. Данный алгоритм также удобно использовать на не полных графах
(в реализации есть проверка на наличие ребра между вершинами в последовательности)

2. Метод ближайшего соседа

В данном алгоритме минимальный путь строится таким образом: на каждом шаге для последней
добавленной в путь вершины находится ребро в еще не добавленную в путь вершину с минимальным
весом. Для быстрого поиска подходящего ребра с минимальным весом граф хранится в векторе множеств пар,
таким образом все ребра для данной вершины отсортированы в порядке увеличения веса. Так как граф полный,
на каждом шаге мы сможем найти ребро. В результате мы имеем длину минимального пути и сам путь.

Путь мы строим сами, в результате имеем линейную сложность - обход по всем вершинам. Но на i - ом шаге в цикле
может добавиться в худшем случае еще (i-1) итерация (поиск минимального ребра в еще не посещенную вершину),
но даже в таком случае алгоритм является более быстрым, чем полный перебор.
Но метод ближайшего соседа не всегда дает в результате самый минимальный путь, а только приближенный к 
правильному ответу


